package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal IGUAL,DIFERENTE,MENORQUE,MAYORQUE,MENORIGUALQUE,MAYORIGUALQUE,AND,OR,NOT;
nonterminal NodoC3D inicial, expr,exprg,exprh,expri,factor,term;
/*
GRAMATICA
incial::=expr;
expr::=expr IGUAL expri
       |expr DIFERENTE expri
       |expr MENORIGUALQUE expri
       |expr MAYORIGUALQUE expri
       |expri;
expri::=expri AND exprh
       |expri OR exprh
       |expri NOT exprh
       |exprh;
exprh::=exprh MENORQUE exprg
       |exprh MAYORQUE exprg
       |exprg;

exprg::=exprg MAS factor
       |exprg MENOS factor
       |factor;
factor::=factor MULT factor
       |factor DIV factor
       |factor POT factor
       |MENOS term
       |term;

term::=PAR_IZQ expr PAR_DER
       |ID
       |ENTERO
       |DECIMAL;

*/

   inicial ::={: ControlC3D.reiniciar(); :} expr:e
                 {: 
                        RESULT = e;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + e.getCad());
                 :}
                 ;

 
    expr::= expr:izq  IGUAL expri:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " == " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

         |expr:izq DIFERENTE expri:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " != " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

         | expr:izq MENORIGUALQUE expri:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " <= " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

         |expr:izq MAYORIGUALQUE expri:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " >= " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                |
                 expri:t
                 {: RESULT =t; :}
                 ;

       expri::=expri:izq AND exprh:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

         |expri:izq OR exprh:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + "||" + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                |expri:izq NOT exprh:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + "!" + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                |exprh:t
                 {: RESULT =t; :}
                 ; 

      exprh::= exprh:izq MENORQUE exprg:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " < " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}

         | exprh:izq MAYORQUE exprg:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " > " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                |
                 exprg:t
                 {: RESULT =t; :}
                 ;

         exprg::= exprg:izq MAS factor:der
                {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                 |exprg:izq MENOS factor:der
                     {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                 | factor:f
                 {: RESULT = f; :}
                 ;
   
     factor::=factor:izq MULT term:der
                 {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                 |factor:izq DIV term:der
                  {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                 | factor:izq POT term:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                | MENOS term:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
                  |
                 term:t
                 {: RESULT =t; :}
                 ;

   term      ::=  PAR_IZQ expr:e  PAR_DER 
                 {: RESULT = e; :}
                 |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;